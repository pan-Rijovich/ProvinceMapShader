Hello, I'm January Desk.
In this video, I will talk about how to implement area movement mechanisms in Unity.
Area movements have been used in many board games.
In pc games, the most famous one is Paradox's grand strategy game.
First, let's grab the EU4 province map from the game or wiki page.
This image inspired me to make this video since many people including myself wanted such a video to describe how to make a game based on a pixel map like this.
Let's disable some Unity "optimization" which makes things a mess since we require accurate pixel information.
Let's make a quad, which denotes our map and resize it to match its original size.
Ensure the quad's position is (0 0 0).
Edge detection Shader
Let's make a simple edge detection shader.
We will just use a na√Øve implementation.
Simply differentiate between left and right.
The edge is shown in color though not very clear.
Make a corresponding material from the shader.
You can check edge detection wiki to figure this weird color edge effect out.
Let's translate edge points to black and inner areas to white.
The 0.001 is hard coded here for simplicity, you can tune the value to adjust edge width.
Remap & Palette texture setup
Let's make two sub textures.
Palette texture setup a pixel for every area and the value can represent color or other information.
Remap texture is the same size as the main texture and encode how pixels in an area are mapped to a palette texture's pixel.
Placeholder color remap
Let's fill in some placeholders to show the remap effect.
How the code here encodes the corresponding relation is illustrated in this image, you can pause a while to figure it out.
Remap & Palette script setup
Let's set up the script.
We use Color32 instead of Color to prevent floating errors.
GetPixels32 will return a Color32 Array which flatten the pixel from left to right, bottom to top.
We will encode the first seen main color as 0, second as 1 and so on.
They are then translated to remap color.
The transform is shown in the image, you can pause a while to figure it out.
Remap encoding illustration
Build the texture, don't forget to set filter mode using the same way we import the texture.
Since the palette texture is set to be all white, the white black map is reconstructed.
This is the generated remap texture.
Generated remap texture illustration
Let's add hover interaction in the script.
Since we place the map in center and scale to match the texture size.
We can simply map a collide position to a texture pixel, and get its associated area and palette color.
Find the palette position by looking at remap color.
Here we replace the default white color with blue color.
Area "Brush" illustration
We can see how the palette texture pixels are replaced with blue.
Let's record the previous selected area color, so we can reset the color to white when the cursor enters a new area.
Area "Selection" illustration
Let's import the terrain texture in the same way as we import the province texture.
Let's make the selected area highlighted.
First, modify the shader, the output will be terrain texture, which brightness is modified by the "palette" value.
Here we take the red value to denote "inverse" brightness.
How highlight works.
The image shows how the lower the channel value leads to higher brightness gain.
Increase the red value of the selected color a little to decrease brightness somewhat.
Terrain texture and selection highlighting illustration.
So in this part, we make an area selection and color change prototype.
Summary and GitHub Source
I think other parts are trivial to implement.
And you can find source code in GitHub, and the link will be left below.
Anyway, this is my first video on YouTube, if you have suggestions or requests, please leave a comment so I can improve in further videos.